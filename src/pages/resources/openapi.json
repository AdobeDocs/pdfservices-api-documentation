{
  "openapi": "3.0.1",
  "info": {
    "title": "DC Platform APIs",
    "description": "Trying to document dc platform api's here",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "2.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://dc-platform-api.adobe.io/"
    }
  ],
  "tags": [
    {
      "name": "asset",
      "description": "Upload and download asset",
      "url": "https://dc-sensei-api.adobe.io/",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "createpdf",
      "description": "Create PDF document from Microsoft Office documents",
      "url": "https://dc-platform-api.adobe.io/",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "exportpdf",
      "description": "Convert a PDF File to a non-PDF File",
      "url": "https://dc-platform-api.adobe.io/",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "extractpdf",
      "description": "Extract content from PDF documents and output it in a structured JSON format, along with tables and figures",
      "url": "https://dc-platform-api.adobe.io/",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "htmltopdf",
      "description": "Convert HTML Resources to a PDF File",
      "url": "https://dc-platform-api.adobe.io/",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "combinepdf",
      "description": "Combine multiple PDF Files into a single PDF File",
      "url": "https://dc-platform-api.adobe.io/",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "compresspdf",
      "description": "Compress a PDF File",
      "url": "https://dc-platform-api.adobe.io/",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "linearizepdf",
      "description": "Convert a PDF File to a Linearized or Web Optimized PDF File",
      "url": "https://dc-platform-api.adobe.io/",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "ocr",
      "description": "Perform OCR on a PDF File",
      "url": "https://dc-platform-api.adobe.io/",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "pagemanipulation",
      "description": "Rotate and delete pages of a PDF File",
      "url": "https://dc-platform-api.adobe.io/",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "pdfproperties",
      "description": "Extract basic information about a PDF document.",
      "url": "https://dc-platform-api.adobe.io/",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "protectpdf",
      "description": "Add encryption and/or restrict permissions on a PDF File",
      "url": "https://dc-platform-api.adobe.io/",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "removeprotection",
      "description": "Remove password protection from a PDF File",
      "url": "https://dc-platform-api.adobe.io/",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "splitpdf",
      "description": "Split a PDF File into multiple PDF Files",
      "url": "https://dc-platform-api.adobe.io/",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    }
  ],
  "x-tagGroups": [
    {
      "name": "Files",
      "tags": [
        "asset"
      ]
    },
    {
      "name": "PDFOperations",
      "tags": [
        "createpdf",
        "exportpdf",
        "extractpdf",
        "htmltopdf",
        "combinepdf",
        "compresspdf",
        "linearizepdf ",
        "ocr",
        "pagemanipulation",
        "pdfproperties",
        "protectpdf",
        "removeprotection",
        "splitpdf"
      ]
    }

  ],
  "paths": {
    "/tmp": {
      "post": {
        "tags": [
          "asset"
        ],
        "summary": "Upload an asset to tmp storage",
        "description": "Upload file",
        "operationId": "asset.upload",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The content type (media type) of the file. For example, application/pdf",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          }
        },
        "security": [
          {
            "auth": [
            ]
          }
        ]
      }
    },
    "/tmp/blob/{assetID}": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Download asset from temp storage",
        "description": "Download file",
        "operationId": "asset.download",
        "parameters": [
          {
            "name": "assetID",
            "in": "path",
            "description": "ID of the asset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset downloaded successfully",
            "headers": {
              "Content-Type": {
                "description": "Content type of the file",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          }
        },
        "security": [
          {
            "auth": [
            ]
          }
        ]
      }
    },
    "/pdf-services/operation/createpdf": {
      "post": {
        "tags": [
          "createpdf"
        ],
        "summary": "Create PDF document from non PDF document.",
        "description": "Create PDF document from Microsoft Office documents (Word, Excel and PowerPoint) and other supported file formats.",
        "operationId": "pdfoperations.createpdf",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Params for Create PDF Operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePDF"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The operation is completed successfully before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default). Expect 201 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "Request creation for the operation and status uri generated, which can be found in the 'location' header.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/202"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the error JSON response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pdf-services/operation/createpdf/{jobID}/status": {
      "get": {
        "tags": [
          "createpdf"
        ],
        "summary": "Poll the createPDF Job for completion",
        "operationId": "pdfoperations.jobstatus",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID of the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation has failed due to some reason before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default), for detailed error refer cpf:status field inside the response body. Expect 200 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-server": {
                "description": "The name and version of the server.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        }
      }
    },
    "/pdf-services/operation/exportpdf": {
      "post": {
        "tags": [
          "exportpdf"
        ],
        "summary": "Export a PDF file into a number of supported formats.",
        "description": "Export a PDF file into a number of supported formats. By default Exporting to an image produces a zip archive containing one image per page. Each image file name ends with _<unpadded_page_index_number>. For example, a PDF file with 15 pages will generate 15 image files. The first file name ends with _1 and the last file name ends with _15. To get the results of Exporting to image as non zip output, please set the outputType parameter to listOfPageImages and use assetIDList to get the result.",
        "operationId": "pdfoperations.exportpdf",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Parameter to specify output document target format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportPDF"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The operation is completed successfully before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default). Expect 201 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "Request creation for the operation and status uri generated, which can be found in the 'location' header.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/202"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the error JSON response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-server": {
                "description": "The name and version of the server.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pdf-services/operation/exportpdf/{jobID}/status": {
      "get": {
        "tags": [
          "exportpdf"
        ],
        "summary": "Poll the exportPDF Job for completion",
        "operationId": "pdfoperations.exportpdf.jobstatus",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID of the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation has failed due to some reason before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default), for detailed error refer cpf:status field inside the response body. Expect 200 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/ExportPDFJobStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-server": {
                "description": "The name and version of the server.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        }
      }
    },
    "/pdf-services/operation/extractpdf": {
      "post": {
        "tags": [
          "extractpdf"
        ],
        "summary": "Extract content from PDF documents and output it in a structured JSON format, along with tables and figures",
        "description": "Extract PDF Content, Tables content and Tables/Figures renditions from a PDF document. Various available options are: (mutually exclusive)\n\n1. Extract text with structure (headings, paragraphs, lists and footnotes)\n\n2. Extract tables data as CSV or XLSX\n\n3. Extract tables as images.\n\n4. Extract bounding boxes for characters present in text blocks(paragraphs, list, headings)\n\n5. Extract figures or images as PNG",
        "operationId": "pdfoperations.extractpdf",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Params for Extract PDF Operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtractPDF"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The operation is completed successfully before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default). Expect 201 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "Request creation for the operation and status uri generated, which can be found in the 'location' header.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/202"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the error JSON response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-server": {
                "description": "The name and version of the server.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pdf-services/operation/extractpdf/{jobID}/status": {
      "get": {
        "tags": [
          "extractpdf"
        ],
        "summary": "Poll the extractPDF Job for completion",
        "operationId": "pdfoperations.jobstatus",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID of the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation has failed due to some reason before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default), for detailed error refer cpf:status field inside the response body. Expect 200 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/ExtractPDFJobStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-server": {
                "description": "The name and version of the server.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        }
      }
    },
    "/pdf-services/operation/htmltopdf": {
      "post": {
        "tags": [
          "htmltopdf"
        ],
        "summary": "Convert HTML Resources to a PDF File",
        "description": "Creates PDFs from static/dynamic HTML or HTML(with inline CSS) or just a URL. It's a common scenario for enterprise to provide end users with a HTML template with form fields. In case of dynamic HTML this API allows you to capture the users unique data entries and then save it as PDF. Collected data is stored in a JSON file, and the source HTML file must include <script src='./json.js' type='text/javascript'></script>. You can also provide the URL of the HTML page in inputUrl parameter.",
        "operationId": "pdfoperations.htmltopdf",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Params for converting HTML To PDF Operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HtmlToPdf"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The operation is completed successfully before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default). Expect 201 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "Request creation for the operation and status uri generated, which can be found in the 'location' header.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/202"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the error JSON response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pdf-services/operation/htmltopdf/{jobID}/status": {
      "get": {
        "tags": [
          "htmltopdf"
        ],
        "summary": "Poll the htmlToPdf Job for completion",
        "operationId": "pdfoperations.jobstatus",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID of the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation has failed due to some reason before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default), for detailed error refer cpf:status field inside the response body. Expect 200 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/HtmlToPdfJobStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-server": {
                "description": "The name and version of the server.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        }
      }
    },
    "/pdf-services/operation/combinepdf": {
      "post": {
        "tags": [
          "combinepdf"
        ],
        "summary": "Combine multiple PDF Files into a single PDF File",
        "description": "Combines multiple PDF files(upto 20 files) into a single PDF file. Allows specifying which pages of the source files to combine. By default all the pages of source files are considered if explicit PageRanges are not specified.",
        "operationId": "pdfoperations.combinepdf",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Params for Combine PDF Operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CombinePDF"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The operation is completed successfully before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default). Expect 201 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "Request creation for the operation and status uri generated, which can be found in the 'location' header.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/202"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the error JSON response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pdf-services/operation/combinepdf/{jobID}/status": {
      "get": {
        "tags": [
          "combinepdf"
        ],
        "summary": "Poll the combinePDF Job for completion",
        "operationId": "pdfoperations.jobstatus",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID of the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation has failed due to some reason before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default), for detailed error refer cpf:status field inside the response body. Expect 200 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/CombinePDFJobStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-server": {
                "description": "The name and version of the server.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        }
      }
    },
    "/pdf-services/operation/compresspdf": {
      "post": {
        "tags": [
          "compresspdf"
        ],
        "summary": "Compress a PDF File",
        "description": "Compress PDFs to reduce the file size prior to performing workflow operations that use bandwidth or memory. Supported levels of compression which reduces the file size of pdf:\n\n1. Low : Reduces resolution of the coloured and grayscale images above 250 dpi to 200 dpi. This option uses JP2K high quality compression.\n\n2. Medium : Reduces resolution of the coloured and grayscale images above 200 dpi to 144 dpi. This option uses JP2K medium quality compression.\n\n3. High : Reduces resolution of the coloured and grayscale images above 100 dpi to 72 dpi. This option uses JPEG medium quality compression. Output pdf will not contain hidden layers, document structure, metadata, javascript, user properties and print settings.",
        "operationId": "pdfoperations.compresspdf",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Params for Compress PDF Operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompressPDF"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The operation is completed successfully before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default). Expect 201 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "Request creation for the operation and status uri generated, which can be found in the 'location' header.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/202"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the error JSON response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pdf-services/operation/compresspdf/{jobID}/status": {
      "get": {
        "tags": [
          "compresspdf"
        ],
        "summary": "Poll the compressPDF Job for completion",
        "operationId": "pdfoperations.jobstatus",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID of the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation has failed due to some reason before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default), for detailed error refer cpf:status field inside the response body. Expect 200 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/CompressPDFJobStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-server": {
                "description": "The name and version of the server.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        }
      }
    },
    "/pdf-services/operation/linearizepdf": {
      "post": {
        "tags": [
          "linearizepdf"
        ],
        "summary": "Convert a PDF File to a Linearized or Web Optimized PDF File",
        "description": "Linearize a PDF Document to create a web-optimized PDF Document which supports incremental access in network environments..",
        "operationId": "pdfoperations.linearizepdf",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Params for Linearize PDF Operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinearizePDF"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The operation is completed successfully before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default). Expect 201 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "Request creation for the operation and status uri generated, which can be found in the 'location' header.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/202"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the error JSON response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pdf-services/operation/linearizepdf/{jobID}/status": {
      "get": {
        "tags": [
          "linearizepdf"
        ],
        "summary": "Poll the linearizePDF Job for completion",
        "operationId": "pdfoperations.jobstatus",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID of the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation has failed due to some reason before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default), for detailed error refer cpf:status field inside the response body. Expect 200 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/LinearizePDFJobStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-server": {
                "description": "The name and version of the server.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        }
      }
    },
    "/pdf-services/operation/ocr": {
      "post": {
        "tags": [
          "ocr"
        ],
        "summary": "Perform OCR on a PDF File",
        "description": "Perform OCR on PDF Document by providing specific language and type.\n\nThere are two types which produce a different result:\n\n1. One type ensures that text is searchable and selectable, but modifies the original image during the cleanup process (for example, deskews it) before placing an invisible text layer over it. This type removes unwanted artifacts and may result in a more readable document in some scenarios.\n\n2. The second (EXACT) type, also overlays a searchable text layer over the original image, but in this case, the original image is unchanged. This type produces maximum fidelity to the original image.",
        "operationId": "pdfoperations.ocr",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Params for OCR PDF Operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OCR"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The operation is completed successfully before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default). Expect 201 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "Request creation for the operation and status uri generated, which can be found in the 'location' header.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/202"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the error JSON response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pdf-services/operation/ocr/{jobID}/status": {
      "get": {
        "tags": [
          "ocr"
        ],
        "summary": "Poll the ocr Job for completion",
        "operationId": "pdfoperations.jobstatus",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID of the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation has failed due to some reason before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default), for detailed error refer cpf:status field inside the response body. Expect 200 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/OCRJobStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-server": {
                "description": "The name and version of the server.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        }
      }
    },
    "/pdf-services/operation/pagemanipulation": {
      "post": {
        "tags": [
          "pagemanipulation"
        ],
        "summary": "Rotate and delete pages of a PDF File",
        "description": "Selectively rotate or delete pages in a PDF document. For example, you can change portrait view to landscape view or remove certain pages from a PDF document.",
        "operationId": "pdfoperations.pagemanipulation",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Params for Page Manipulation PDF Operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PageManipulation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The operation is completed successfully before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default). Expect 201 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "Request creation for the operation and status uri generated, which can be found in the 'location' header.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/202"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the error JSON response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pdf-services/operation/pagemanipulation/{jobID}/status": {
      "get": {
        "tags": [
          "pagemanipulation"
        ],
        "summary": "Poll the pagemanipulation Job for completion",
        "operationId": "pdfoperations.jobstatus",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID of the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation has failed due to some reason before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default), for detailed error refer cpf:status field inside the response body. Expect 200 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/PageManipulationJobStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-server": {
                "description": "The name and version of the server.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        }
      }
    },
    "/pdf-services/operation/pdfproperties": {
      "post": {
        "tags": [
          "pdfproperties"
        ],
        "summary": "Extract basic information about a PDF document.",
        "description": "Extract basic information about the document such as page count, pdf version, if the file is encrypted, if the file linearized, if the file contains embedded files etc.",
        "operationId": "pdfoperations.pdfproperties",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Params for Pdf Properties Operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PDFProperties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The operation is completed successfully before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default). Expect 201 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "Request creation for the operation and status uri generated, which can be found in the 'location' header.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/202"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the error JSON response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pdf-services/operation/pdfproperties/{jobID}/status": {
      "get": {
        "tags": [
          "pdfproperties"
        ],
        "summary": "Poll the PDF Properties Job for completion",
        "operationId": "pdfoperations.jobstatus",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID of the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation has failed due to some reason before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default), for detailed error refer cpf:status field inside the response body. Expect 200 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/PDFPropertiesJobStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-server": {
                "description": "The name and version of the server.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        }
      }
    },
    "/pdf-services/operation/protectpdf": {
      "post": {
        "tags": [
          "protectpdf"
        ],
        "summary": "Add encryption and/or restrict permissions on a PDF File",
        "description": "Secure a PDF Document with user or/and owner password and set the restrictions on certain features like printing, editing and copying in the PDF document. You can specify the type of content to be encrypted with your specified encryption algorithm.",
        "operationId": "pdfoperations.protectpdf",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Params for Protect PDF Operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProtectPDF"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The operation is completed successfully before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default). Expect 201 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "Request creation for the operation and status uri generated, which can be found in the 'location' header.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/202"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the error JSON response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pdf-services/operation/protectpdf/{jobID}/status": {
      "get": {
        "tags": [
          "protectpdf"
        ],
        "summary": "Poll the protectPDF Job for completion",
        "operationId": "pdfoperations.jobstatus",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID of the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation has failed due to some reason before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default), for detailed error refer cpf:status field inside the response body. Expect 200 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/ProtectPDFJobStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-server": {
                "description": "The name and version of the server.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        }
      }
    },
    "/pdf-services/operation/removeprotection": {
      "post": {
        "tags": [
          "removeprotection"
        ],
        "summary": "Remove password protection from a PDF File",
        "description": "Remove security from a PDF document. If the PDF is protected by owner password then the owner password is required in the field:contentAnalyzerRequests.params.cpf:inline:password to remove security otherwise user password is required.",
        "operationId": "pdfoperations.removeprotection",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Params for Remove Protection PDF Operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveProtection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The operation is completed successfully before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default). Expect 201 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "Request creation for the operation and status uri generated, which can be found in the 'location' header.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/202"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the error JSON response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pdf-services/operation/removeprotection/{jobID}/status": {
      "get": {
        "tags": [
          "removeprotection"
        ],
        "summary": "Poll the removeProtection Job for completion",
        "operationId": "pdfoperations.jobstatus",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID of the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation has failed due to some reason before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default), for detailed error refer cpf:status field inside the response body. Expect 200 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/RemoveProtectionJobStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-server": {
                "description": "The name and version of the server.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        }
      }
    },
    "/pdf-services/operation/splitpdf": {
      "post": {
        "tags": [
          "splitpdf"
        ],
        "summary": "Split a PDF File into multiple PDF Files",
        "description": "Split a PDF document into multiple smaller documents by simply specifying either the number of files, pages per file, or page ranges. Various available options are: (mutually exclusive)\n\n1. Use the page count to specify the maximum number of pages in each of the output file(s).\n\n2. Creating smaller PDFs with a set number of pages, you can split PDFs into multiple smaller documents by specifying page ranges where each page range corresponds to a single output file.\n\n3. Split PDFs by file count. In this case, the operation creates the specified number of files with each containing an identical number of pages (if possible).",
        "operationId": "pdfoperations.splitpdf",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Params for Split PDF Operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitPDF"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The operation is completed successfully before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default). Expect 201 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "Request creation for the operation and status uri generated, which can be found in the 'location' header.",
            "headers": {
              "location": {
                "description": "Job status URI for polling the results",
                "schema": {
                  "type": "string"
                }
              },
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/202"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the error JSON response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pdf-services/operation/splitpdf/{jobID}/status": {
      "get": {
        "tags": [
          "splitpdf"
        ],
        "summary": "Poll the splitPDF Job for completion",
        "operationId": "pdfoperations.splitpdf",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID of the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer + Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-key",
            "in": "header",
            "description": "The clientId from the generated credentials",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation has failed due to some reason before the wait time provided in the Prefer header specified in the request (if Prefer header was not specified then the wait time is 59s by default), for detailed error refer cpf:status field inside the response body. Expect 200 HTTP status code only when respond-async,wait=0 is NOT specified in the Prefer Header value while creating the request. Refer the response body structure from GET call 200 response.",
            "headers": {
              "content-type": {
                "description": "The content type of the status call response.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/SplitPDFJobStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request was invalid or cannot be otherwise served.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were missing or incorrect.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-server": {
                "description": "The name and version of the server.",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "408": {
            "description": "Request Timed Out. Some operation has timed out due to client issue.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/408"
                }
              }
            }
          },
          "429": {
            "description": "Caller doesn't have sufficient quota for this operation.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/429"
                }
              }
            }
          },
          "500": {
            "description": "nternal Server Error. The server has encountered an error and is unable to process your request at this time.",
            "headers": {
              "content-type": {
                "description": "The content type of the POST API call response",
                "schema": {
                  "type": "string"
                }
              },
              "x-request-id": {
                "description": "A unique value to identify this request. If x-request-id is specified in the POST request, this value will be the same as the input.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "documentLanguage": {
        "description": "Specifies the default language for the input non-PDF document. In absence of font info within file’s content, an appropriate font is chosen on its basis.",
        "type": "string",
        "default": "en-US",
        "enum": [
          "ca-ES",
          "cs-CZ",
          "da-DK",
          "de-DE",
          "en-AE",
          "en-GB",
          "en-IL",
          "en-US",
          "es-ES",
          "es-MX",
          "eu-ES",
          "fi-FI",
          "fr-CA",
          "fr-FR",
          "fr-MA",
          "hr-HR",
          "ht-HU",
          "it-IT",
          "ja-JP",
          "kr-KR",
          "nb-NO",
          "nl-NL",
          "pl-PL",
          "pt-BR",
          "pt-PT",
          "ro-RO",
          "ru-RU",
          "sk-SK",
          "sl-SI",
          "sv-SE",
          "tr-TR",
          "uk-UA",
          "zh-CN",
          "zh-TW"
        ]
      },
      "ocrLang": {
        "description": "Specifies the input language to be used for OCR.",
        "type": "string",
        "default": "en-US",
        "enum": [
          "da-DK",
          "lt-LT",
          "sl-SI",
          "el-GR",
          "ru-RU",
          "en-US",
          "zh-HK",
          "hu-HU",
          "et-EE",
          "pt-BR",
          "uk-UA",
          "nb-NO",
          "pl-PL",
          "lv-LV",
          "fi-FI",
          "ja-JP",
          "es-ES",
          "bg-BG",
          "en-GB",
          "cs-CZ",
          "mt-MT",
          "de-DE",
          "hr-HR",
          "sk-SK",
          "sr-SR",
          "ca-CA",
          "mk-MK",
          "ko-KR",
          "de-CH",
          "nl-NL",
          "zh-CN",
          "sv-SE",
          "it-IT",
          "no-NO",
          "tr-TR",
          "fr-FR",
          "ro-RO",
          "iw-IL"
        ]
      },
      "202": {
        "type": "object",
        "required": ["type","status","title","completed"],
        "properties": {
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure.",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "400": {
        "type": "object",
        "required": ["type","status","title","completed"],
        "properties": {
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>MULTIPART_FIELD_MISSING</td><td>Required multipart field cid:multipartLabel not found in the request.</td></tr><tr><td>ENGINE_NOT_FOUND</td><td>Unable to find engine corresponding to the engine path given null.</td></tr><tr><td>REQUIRED_INPUTS_MISSING</td><td>Required input documentIn not found.</td></tr><tr><td>IO_SCHEMA_MISMATCH</td><td>Invalid I/O in the request. I/O name: ....</td></tr><tr><td>INVALID_ENGINE_REQUEST</td><td>Required output documentOut not found.</td></tr><tr><td>MEDIA_TYPE_UNSUPPORTED</td><td>Invalid I/O in the request. I/O name:....</td></tr><tr><td>REQUEST_TOO_LARGE</td><td>Total size of inline inputs exceeds permitted size: 100000000 bytes.</td></tr><tr><td>WAIT_TIME_NOT_ALLOWED</td><td>Invalid value of wait seconds provided..</td></tr><tr><td>INVALID_REQUEST_PARAMS</td><td>Invalid parameters in request. Required parameter %param missing.</td></tr><tr><td>INVALID_REQUEST</td><td>Invalid Request Schema.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "401": {
        "type": "object",
        "required": ["code","message","details"],
        "properties": {
          "code": {
            "description": "Unauthorized",
            "type": "string"
          },
          "message": {
            "description": "An English language string that contains more information about the error. This is not intended as information to be presented to an end user, is instead be helpful for logging and debugging.",
            "type": "string"
          },
          "details": {
            "description": "A JSON object that contains information specific to the error. The schema and semantics are specified with the individual method. This allows machine readable extra information.",
            "type": "object"
          }
        }
      },
      "408": {
        "type": "object",
        "required": ["type","status","title","completed"],
        "properties": {
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>REQUEST_TIMEOUT</td><td>Request processing took more than %s seconds.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "429": {
        "type": "object",
        "required": ["type","status","title","completed"],
        "properties": {
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>INSUFFICIENT_QUOTA</td><td>Client exhausted the Quota.</td></tr><tr><td>INSUFFICIENT_QUOTA</td><td>Client did not purchase a policy to call this engine.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "500": {
        "type": "object",
        "required": ["type","status","title","completed"],
        "properties": {
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>INTERNAL_SERVER_ERROR</td><td>There was an error processing your request.</td></tr><tr><td>REQUEST_SAVING_FAILED</td><td>Error while ingesting input stream.</td></tr><tr><td>RESPONSE_TOO_LARGE</td><td>Size of predict response exceeds permitted limit: %s.</td></tr><tr><td>INVALID_ENGINE_SETUP</td><td>Queue not found for predict service.</td></tr><tr><td>INVALID_ENGINE_RESPONSE</td><td>output message payload is null.</td></tr><tr><td>CONTENT_TRANSFER_ERROR</td><td>Unknown Error.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "200": {
        "type": "object",
        "required": ["type","status","completed"],
        "properties": {
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>SOURCE_EMPTY</td><td>The input file is a zero length file.</td></tr><tr><td>REQUEST_TOO_LARGE</td><td>The input file is too large.</td></tr><tr><td>CORRUPT_DOCUMENT</td><td>For $(format) mime-type The input file appears to be corrupted and cannot be processed.</td></tr><tr><td>PASSWORD_PROTECTED</td><td>Source file is protected and cannot be processed.</td></tr><tr><td>INTERNAL_SERVER_ERROR</td><td>An Internal Server Error has occurred.</td></tr><tr><td>REQUEST_TIMEOUT</td><td>The operation has timed out, please try after some time.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "createTaggedPDF": {
        "description": "Enables accessibility and reflow in the converted PDF file with Tagged PDF.",
        "type": "boolean"
      },
      "CreatePDF": {
        "description": "Params for Create PDF Operation",
        "type": "object",
        "properties": {
          "assetID": {
            "description": "A file asset ID",
            "type": "string"
          },
          "documentLanguage": {
            "$ref": "#/components/schemas/documentLanguage"
          }
        },
        "default": {
          "assetID": "string",
          "documentLanguage": "en-US"
        },
        "required": ["assetID"],
        "additionalProperties": false
      },
      "ExportPDF": {
        "description": "Parameter to specify output document target format",
        "type": "object",
        "required": ["assetID","targetFormat"],
        "properties": {
          "assetID": {
            "description": "A file asset ID",
            "type": "string"
          },
          "targetFormat": {
            "description": "Target exported File Format",
            "type": "string",
            "enum": ["doc", "docx", "jpeg", "png", "pptx", "xlsx", "rtf"]
          },
          "outputType": {
            "description": "Applicable only in case of PDF to Image conversions. If it is set to zipOfPageImages then the response will be provided as a zip response in assetID, otherwise if set as listOfPageImages the response will be provided as list of images as specified in the targetFormat in assetIDList.",
            "type": "string",
            "enum": ["listOfPageImages", "zipOfPageImages"]
          }
        },
        "default": {
          "assetID": "string",
          "documentLanguage": "en-US"
        },
        "additionalProperties": false
      },
      "ExtractPDF": {
        "description": "Params for Extract PDF Operation",
        "type": "object",
        "required": ["assetID","elementsToExtract"],
        "properties": {
          "assetID": {
            "description": "A file asset ID",
            "type": "string"
          },
          "getCharBounds": {
            "description": "Extract bounding boxes for characters present in text blocks(paragraphs, list, headings)",
            "type": "boolean"
          },
          "includeStyling": {
            "description": "Boolean specifying whether to add styling information to jsonoutput",
            "type": "boolean"
          },
          "elementsToExtract": {
            "description": "List of elements that should be extracted as json. Possible values are text and tables.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["text", "tables"]
            }
          },
          "tableOutputFormat": {
            "description": "Specifies the format of table contents output. Possible values are csv and xlsx",
            "type": "string"
          },
          "renditionsToExtract": {
            "description": "List of elements whose renditions should be generated. Possible values are figures and tables.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["tables", "figure"]
            }
          }
        },
        "default": {
          "assetID": "string",
          "getCharBounds" : false,
          "includeStyling" : false,
          "elementsToExtract" : ["string", "string"],
          "tableOutputFormat" : "xlsx",
          "renditionsToExtract" : ["string", "string"]
        },
        "additionalProperties": false
      },
      "HtmlToPdf": {
        "description": "Params for converting HTML To PDF Operation",
        "type": "object",
        "properties": {
          "assetID": {
            "description": "A file asset ID",
            "type": "string"
          },
          "json": {
            "description": "JavaScript variables to be placed in global scope to reference while rendering the HTML. This mechanism is intended to be used to supply data that might otherwise be retrieved using ajax requests. The actual mechanics of accessing this content varies depending if rendering from a zip file or from a url. When rendering from a zip file, the source collateral must include a script element such as:\n<script src='./json.js' type='text/javascript'></script>\nWhen rendering from a URL, the content of this json object is injected into the browser VM before the page is rendered.",
            "type": "string",
            "default": ""
          },
          "print": {
            "description": "Parameters for specifying the print properties.",
            "type": "object",
            "properties": {
              "includeHeaderFooter": {
                "description": "Determine whether to add default headers and footers to the output pages. The default header includes a short date and the contents of document.title. The default footer includes a file name and a page n/m reference.",
                "type": "boolean",
                "default": false
              }
            }
          },
          "pageLayout": {
            "description": "Parameters for specifying the layout of the output page.",
            "type": "object",
            "properties": {
              "pageWidth": {
                "description": "The width (in inches) of the output paper size.",
                "type": "number",
                "default": [11]
              },
              "pageHeight": {
                "description": "The height (in inches) of the output paper size.",
                "type": "number",
                "default": [8.5]
              }
            }
          }
        },
        "default": {
          "assetID": "string",
          "json" : ""
        },
        "additionalProperties": false
      },
      "CombinePDF": {
        "description": "Params for Combine PDF Operation",
        "type": "object",
        "properties": {
          "assets": {
            "description": "The array of assets with the required PageRanges to include in the output PDF document.",
            "type": "array",
            "items": {
              "properties": {
                "assetID": {
                  "description": "A file asset ID",
                  "type": "string",
                  "required": true
                },
                "pageRanges" : {
                  "description": "Parameters to allow specifying which pages to be included for the PDF document. If pageRanges is not provided, all pages are considered by default.",
                  "type": "array",
                  "anyOf": [{
                    "$ref": "#/components/schemas/start"
                  },{
                    "$ref": "#/components/schemas/end"
                  }]
                }
                }
              }
            }
          },
        "default": {
          "assetID": "string"
        },
        "required": ["assets"],
        "additionalProperties": false
        },
      "CompressPDF": {
        "description": "Params for Compress PDF Operation",
        "type": "object",
        "properties": {
          "assetID": {
            "description": "A file asset ID",
            "type": "string"
          },
          "compressionLevel": {
            "description": "Specify the level of compression to reduce the file size of the pdf.",
            "type": "string",
            "enum": ["LOW","MEDIUM","HIGH"]
          }
        },
        "default": {
          "assetID": "string"
        },
        "required": ["assetID"],
        "additionalProperties": false
      },
      "LinearizePDF": {
        "description": "Params for Linearize PDF Operation",
        "type": "object",
        "properties": {
          "assetID": {
            "description": "A file asset ID",
            "type": "string"
          }
        },
        "default": {
          "assetID": "string"
        },
        "required": ["assetID"],
        "additionalProperties": false
      },
      "OCR": {
        "description": "Params for OCR PDF Operation",
        "type": "object",
        "properties": {
          "assetID": {
            "description": "A file asset ID",
            "type": "string"
          },
          "ocrLang": {
            "$ref": "#/components/schemas/ocrLang"
          },
          "ocrType": {
            "description": "Specifies OCR Type.",
            "type": "string",
            "default": "searchable_image",
            "enum": ["searchable_image", "searchable_image_exact"]
          }
        },
        "default": {
          "assetID": "string",
          "ocrLang" : "en-US",
          "ocrType" : "searchable_image"
        },
        "required": ["assetID"],
        "additionalProperties": false
      },
      "PageManipulation": {
        "description": "Params for Page Manipulation PDF Operation",
        "type": "object",
        "properties": {
          "assetID": {
            "description": "A file asset ID",
            "type": "string"
          },
          "pageActions": {
            "description": "A list of page actions to be performed on an input PDF document in a given order.",
            "type": "array",
            "items": {
              "properties": {
                "pageAction": {
                  "description": "An action to perform on pdf pages",
                  "type": "object",
                  "oneOf": [{
                    "$ref": "#/components/schemas/delete"
                  },
                    {
                      "$ref": "#/components/schemas/rotate"
                    }]
                }
              }
            }
          }
        },
        "default": {
          "assetID": "string"
        },
        "required": ["assetID","pageActions"],
        "additionalProperties": false
      },
      "PDFProperties": {
        "description": "Params for PDF Properties Operation",
        "type": "object",
        "properties": {
          "assetID": {
            "description": "A file asset ID",
            "type": "string"
          },
          "pageLevel": {
            "description": "To get page level properties of the PDF.",
            "type": "boolean",
            "default": false
          }
        },
        "default": {
          "assetID": "string",
          "pageLevel" : false
        },
        "required": ["assetID"],
        "additionalProperties": false
      },
      "ProtectPDF": {
        "description": "Params for Protect PDF Operation",
        "type": "object",
        "properties": {
          "assetID": {
            "description": "A file asset ID",
            "type": "string"
          },
          "passwordProtection": {
            "description": "Enables the use of passwords to encrypt the input PDF document. At least one of userPassword and ownerPassword must be specified and non-empty. Each password can be up to 128 characters in length.",
            "type": "object",
            "anyOf": [{
              "$ref": "#/components/schemas/userPassword"
            },
              {
                "$ref": "#/components/schemas/ownerPassword"
              }]
          },
          "encryptionAlgorithm": {
            "description": "Sets the encryption algorithm. For AES-128 encryption, the password supports LATIN-I characters only. For AES-256 encryption, the password supports Unicode character set.",
            "type": "string",
            "enum": ["AES_128", "AES_256"]
          },
          "contentToEncrypt": {
            "description": "Sets the type of content to be encrypted. If ONLY_EMBEDDED_FILES option is set, it will render any provided access permissions as ineffective.",
            "type": "string",
            "enum": ["ALL_CONTENT","ALL_CONTENT_EXCEPT_METADATA","ONLY_EMBEDDED_FILES"],
            "default": "ALL_CONTENT"
          },
          "permissions": {
            "description": "Permissions to allow printing, editing and content copying in the PDF document. By default, none of the specified actions are permitted. PRINT_HIGH_QUALITY permission includes PRINT_LOW_QUALITY permission. EDIT_CONTENT permission includes EDIT_DOCUMENT_ASSEMBLY and EDIT_FILL_AND_SIGN_FORM_FIELDS permissions. Permissions settings will only be used in case the ownerPassword is set.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["PRINT_LOW_QUALITY","PRINT_HIGH_QUALITY","EDIT_CONTENT","EDIT_FILL_AND_SIGN_FORM_FIELDS","EDIT_ANNOTATIONS","EDIT_DOCUMENT_ASSEMBLY","COPY_CONTENT"]
            }
          }
        },
        "default": {
          "assetID": "string",
          "contentToEncrypt" : "ALL_CONTENT"
        },
        "required": ["assetID","passwordProtection","encryptionAlgorithm"],
        "additionalProperties": false
      },
      "RemoveProtection": {
        "description": "Params for Remove Protection PDF Operation",
        "type": "object",
        "properties": {
          "assetID": {
            "description": "A file asset ID",
            "type": "string"
          },
          "password": {
            "description": "Password required for removing security/permissions from the PDF document.",
            "type": "string"
          }
        },
        "default": {
          "assetID": "string"
        },
        "required": ["assetID","password"],
        "additionalProperties": false
      },
      "SplitPDF": {
        "description": "Params for Split PDF Operation",
        "type": "object",
        "properties": {
          "assetID": {
            "description": "A file asset ID",
            "type": "string"
          }
        },
        "oneOf": [{
          "$ref": "#/components/schemas/fileCount"
        },
          {
            "$ref": "#/components/schemas/pageCount"
          },
          {
            "$ref": "#/components/schemas/pageRanges"
          }],
        "default": {
          "assetID": "string"
        },
        "required": ["assetID"],
        "additionalProperties": false
      },
      "start": {
        "description": "Start page index of this page range.",
        "type": "integer"
      },
      "end": {
        "description": "End page index of this page range.",
        "type": "integer"
      },
      "delete": {
        "type": "object",
        "properties": {
          "pageRanges" : {
            "description": "Page ranges of a PDF file. Pages in a document can be can be referred in any order, either from the start or end. For e.g.: For a file containing 10 pages, page number 1 can be referred using 1 or -10, page number 10 can be referred using 10 or -1. For performing an operation on the last page, we can provide a range as -1:-1. A page range provided is relative to the input document",
            "type": "array",
            "anyOf": [{
              "$ref": "#/components/schemas/start"
            },{
              "$ref": "#/components/schemas/end"
            }]
          }
        },
        "required": ["pageRanges"]
      },
      "rotate": {
        "type": "object",
        "properties": {
          "angle": {
            "description": "Required for 'rotate' cmd. It specifies the clockwise rotation angle relative to the starting orientation of the page. e.g. if a page is already rotated 90 degrees (landscape), specifying a rotation of 90 degrees will rotate it a further 90 degrees. The valid rotation angles are: 90, 180, 270.",
            "type": "number",
            "enum": [90,180,270]
          },
          "pageRanges" : {
            "description": "Page ranges of a PDF file. Pages in a document can be can be referred in any order, either from the start or end. For e.g.: For a file containing 10 pages, page number 1 can be referred using 1 or -10, page number 10 can be referred using 10 or -1. For performing an operation on the last page, we can provide a range as -1:-1. A page range provided is relative to the input document",
            "type": "array",
            "anyOf": [{
              "$ref": "#/components/schemas/start"
            },{
              "$ref": "#/components/schemas/end"
            }]
          }
        },
        "required": ["angle","pageRanges"]
      },
      "userPassword": {
        "description": "Password used to control opening of an encrypted PDF document. When this property is included and non-empty, the use of a password (either this one or, if specified, the owner password) is necessary to open/view the document. If this password is empty or omitted the document can be opened automatically by conforming PDF viewers.",
        "type": "string"
      },
      "ownerPassword": {
        "description": "Password used to control permissions in a PDF document. Conforming PDF viewers require this password to change the permissions. This password can also be used to open/view the PDF document.",
        "type": "string"
      },
      "fileCount": {
        "description": "The number of documents to split the input PDF file into.",
        "type": "number"
      },
      "pageCount": {
        "description": "The maximum number of pages each of the output files can have.",
        "type": "number"
      },
      "pageRanges": {
        "description":"Page ranges on the basis of which to split the input PDF file. Each page range corresponds to a single output file having the pages specified in the page range. The page ranges may not overlap.",
        "type": "array",
        "items": {
          "properties": {
            "start": {
              "description": "Start page of this page range.Page numbers are indexed from 1 to N.",
              "type": "number",
              "required": true
            },
            "end": {
              "description": "End page of this page range.Page numbers are indexed from 1 to N.",
              "type": "number",
              "required": true
            }
          }
        }
      },
      "Asset": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "string"
          }
        }
      },
      "JobStatus": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "string"
          },
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>SOURCE_EMPTY</td><td>The input file is a zero length file.</td></tr><tr><td>REQUEST_TOO_LARGE</td><td>The input file is too large.</td></tr><tr><td>CORRUPT_DOCUMENT</td><td>For $(format) mime-type The input file appears to be corrupted and cannot be processed.</td></tr><tr><td>PASSWORD_PROTECTED</td><td>Source file is protected and cannot be processed.</td></tr><tr><td>INTERNAL_SERVER_ERROR</td><td>An Internal Server Error has occurred.</td></tr><tr><td>REQUEST_TIMEOUT</td><td>The operation has timed out, please try after some time.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "ExportPDFJobStatus": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "string"
          },
          "assetIDList" : {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>SOURCE_EMPTY</td><td>The input file is a zero length file.</td></tr><tr><td>REQUEST_TOO_LARGE</td><td>The input file is too large.</td></tr><tr><td>CORRUPT_DOCUMENT</td><td>For $(format) mime-type The input file appears to be corrupted and cannot be processed.</td></tr><tr><td>PASSWORD_PROTECTED</td><td>Source file is protected and cannot be processed.</td></tr><tr><td>INTERNAL_SERVER_ERROR</td><td>An Internal Server Error has occurred.</td></tr><tr><td>REQUEST_TIMEOUT</td><td>The operation has timed out, please try after some time.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "ExtractPDFJobStatus": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "string"
          },
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>SOURCE_EMPTY</td><td>The input file is a zero length file.</td></tr><tr><td>REQUEST_TOO_LARGE</td><td>The input file is too large.</td></tr><tr><td>CORRUPT_DOCUMENT</td><td>For $(format) mime-type The input file appears to be corrupted and cannot be processed.</td></tr><tr><td>PASSWORD_PROTECTED</td><td>Source file is protected and cannot be processed.</td></tr><tr><td>INTERNAL_SERVER_ERROR</td><td>An Internal Server Error has occurred.</td></tr><tr><td>REQUEST_TIMEOUT</td><td>The operation has timed out, please try after some time.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "HtmlToPdfJobStatus": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "string"
          },
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>SOURCE_EMPTY</td><td>The input file is a zero length file.</td></tr><tr><td>REQUEST_TOO_LARGE</td><td>The input file is too large.</td></tr><tr><td>CORRUPT_DOCUMENT</td><td>For $(format) mime-type The input file appears to be corrupted and cannot be processed.</td></tr><tr><td>PASSWORD_PROTECTED</td><td>Source file is protected and cannot be processed.</td></tr><tr><td>INTERNAL_SERVER_ERROR</td><td>An Internal Server Error has occurred.</td></tr><tr><td>REQUEST_TIMEOUT</td><td>The operation has timed out, please try after some time.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "CombinePDFJobStatus": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "string"
          },
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>SOURCE_EMPTY</td><td>The input file is a zero length file.</td></tr><tr><td>REQUEST_TOO_LARGE</td><td>The input file is too large.</td></tr><tr><td>CORRUPT_DOCUMENT</td><td>For $(format) mime-type The input file appears to be corrupted and cannot be processed.</td></tr><tr><td>PASSWORD_PROTECTED</td><td>Source file is protected and cannot be processed.</td></tr><tr><td>INTERNAL_SERVER_ERROR</td><td>An Internal Server Error has occurred.</td></tr><tr><td>REQUEST_TIMEOUT</td><td>The operation has timed out, please try after some time.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "CompressPDFJobStatus": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "string"
          },
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>SOURCE_EMPTY</td><td>The input file is a zero length file.</td></tr><tr><td>REQUEST_TOO_LARGE</td><td>The input file is too large.</td></tr><tr><td>CORRUPT_DOCUMENT</td><td>For $(format) mime-type The input file appears to be corrupted and cannot be processed.</td></tr><tr><td>PASSWORD_PROTECTED</td><td>Source file is protected and cannot be processed.</td></tr><tr><td>INTERNAL_SERVER_ERROR</td><td>An Internal Server Error has occurred.</td></tr><tr><td>REQUEST_TIMEOUT</td><td>The operation has timed out, please try after some time.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "LinearizePDFJobStatus": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "string"
          },
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>SOURCE_EMPTY</td><td>The input file is a zero length file.</td></tr><tr><td>REQUEST_TOO_LARGE</td><td>The input file is too large.</td></tr><tr><td>CORRUPT_DOCUMENT</td><td>For $(format) mime-type The input file appears to be corrupted and cannot be processed.</td></tr><tr><td>PASSWORD_PROTECTED</td><td>Source file is protected and cannot be processed.</td></tr><tr><td>INTERNAL_SERVER_ERROR</td><td>An Internal Server Error has occurred.</td></tr><tr><td>REQUEST_TIMEOUT</td><td>The operation has timed out, please try after some time.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "OCRJobStatus": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "string"
          },
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>SOURCE_EMPTY</td><td>The input file is a zero length file.</td></tr><tr><td>REQUEST_TOO_LARGE</td><td>The input file is too large.</td></tr><tr><td>CORRUPT_DOCUMENT</td><td>For $(format) mime-type The input file appears to be corrupted and cannot be processed.</td></tr><tr><td>PASSWORD_PROTECTED</td><td>Source file is protected and cannot be processed.</td></tr><tr><td>INTERNAL_SERVER_ERROR</td><td>An Internal Server Error has occurred.</td></tr><tr><td>REQUEST_TIMEOUT</td><td>The operation has timed out, please try after some time.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "PageManipulationJobStatus": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "string"
          },
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>SOURCE_EMPTY</td><td>The input file is a zero length file.</td></tr><tr><td>REQUEST_TOO_LARGE</td><td>The input file is too large.</td></tr><tr><td>CORRUPT_DOCUMENT</td><td>For $(format) mime-type The input file appears to be corrupted and cannot be processed.</td></tr><tr><td>PASSWORD_PROTECTED</td><td>Source file is protected and cannot be processed.</td></tr><tr><td>INTERNAL_SERVER_ERROR</td><td>An Internal Server Error has occurred.</td></tr><tr><td>REQUEST_TIMEOUT</td><td>The operation has timed out, please try after some time.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "PDFPropertiesJobStatus": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "string"
          },
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>SOURCE_EMPTY</td><td>The input file is a zero length file.</td></tr><tr><td>REQUEST_TOO_LARGE</td><td>The input file is too large.</td></tr><tr><td>CORRUPT_DOCUMENT</td><td>For $(format) mime-type The input file appears to be corrupted and cannot be processed.</td></tr><tr><td>PASSWORD_PROTECTED</td><td>Source file is protected and cannot be processed.</td></tr><tr><td>INTERNAL_SERVER_ERROR</td><td>An Internal Server Error has occurred.</td></tr><tr><td>REQUEST_TIMEOUT</td><td>The operation has timed out, please try after some time.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "ProtectPDFJobStatus": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "string"
          },
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>SOURCE_EMPTY</td><td>The input file is a zero length file.</td></tr><tr><td>REQUEST_TOO_LARGE</td><td>The input file is too large.</td></tr><tr><td>CORRUPT_DOCUMENT</td><td>For $(format) mime-type The input file appears to be corrupted and cannot be processed.</td></tr><tr><td>PASSWORD_PROTECTED</td><td>Source file is protected and cannot be processed.</td></tr><tr><td>INTERNAL_SERVER_ERROR</td><td>An Internal Server Error has occurred.</td></tr><tr><td>REQUEST_TIMEOUT</td><td>The operation has timed out, please try after some time.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "RemoveProtectionJobStatus": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "string"
          },
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>SOURCE_EMPTY</td><td>The input file is a zero length file.</td></tr><tr><td>REQUEST_TOO_LARGE</td><td>The input file is too large.</td></tr><tr><td>CORRUPT_DOCUMENT</td><td>For $(format) mime-type The input file appears to be corrupted and cannot be processed.</td></tr><tr><td>PASSWORD_PROTECTED</td><td>Source file is protected and cannot be processed.</td></tr><tr><td>INTERNAL_SERVER_ERROR</td><td>An Internal Server Error has occurred.</td></tr><tr><td>REQUEST_TIMEOUT</td><td>The operation has timed out, please try after some time.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      },
      "SplitPDFJobStatus": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "string"
          },
          "type": {
            "description": "Internal Field",
            "type": "string"
          },
          "status": {
            "description": "Http status code returned by the service",
            "type": "integer"
          },
          "title": {
            "description": "the state of the request for e.g. In Progress, Completed. In case of Failure, a descriptive error message will be returned",
            "type": "string"
          },
          "completed": {
            "description": "Will be true or false based on the status of the request completion",
            "type": "string"
          },
          "error_code": {
            "description": "The string containing the error_code field. error_code is the Mnemonic returned by service in case of any failure. The below list is extendable and going forward the error codes can become more specific. \n\n<table><tr><th>error_code</th><th>message</th></tr><tr><td>SOURCE_EMPTY</td><td>The input file is a zero length file.</td></tr><tr><td>REQUEST_TOO_LARGE</td><td>The input file is too large.</td></tr><tr><td>CORRUPT_DOCUMENT</td><td>For $(format) mime-type The input file appears to be corrupted and cannot be processed.</td></tr><tr><td>PASSWORD_PROTECTED</td><td>Source file is protected and cannot be processed.</td></tr><tr><td>INTERNAL_SERVER_ERROR</td><td>An Internal Server Error has occurred.</td></tr><tr><td>REQUEST_TIMEOUT</td><td>The operation has timed out, please try after some time.</td></tr></table>",
            "type": "string"
          },
          "message": {
            "description": "Error message returned with error code",
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "auth": {
        "type": "JWT",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://console.adobe.io/jwt/exchange"
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}
